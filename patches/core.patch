From f67247a37647340dd06e8988ebab3f7ddef71607 Mon Sep 17 00:00:00 2001
From: thp1997 <tirthpatel49@gmail.com>
Date: Tue, 7 Feb 2017 07:10:53 +0000
Subject: [PATCH] patch-set (Final)

Change-Id: Ifee12fb1a4f04b2c93fc96b42660d46244289952
---
 healthd/BatteryMonitor.cpp |  4 +++
 include/netutils/ifc.h     |  2 ++
 init/init.cpp              |  9 +++---
 liblog/logd_write.c        | 20 +++++++++++++
 libnetutils/ifc_utils.c    | 75 ++++++++++++++++++++++++++++++++++++++++++++++
 libutils/Android.mk        |  2 ++
 libutils/MediatekHacks.cpp | 18 +++++++++++
 mkbootimg/bootimg.h        |  2 ++
 mkbootimg/mkbootimg.c      | 54 ++++++++++++++++++++++++++++-----
 mkbootimg/unpackbootimg.c  | 47 +++++++++++++++++++++--------
 rootdir/init.rc            | 15 ++++------
 11 files changed, 214 insertions(+), 34 deletions(-)
 create mode 100644 libutils/MediatekHacks.cpp

diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index 86a4fc6..584a466 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -207,7 +207,11 @@ bool BatteryMonitor::update(void) {
     props.batteryLevel = mBatteryFixedCapacity ?
         mBatteryFixedCapacity :
         getIntField(mHealthdConfig->batteryCapacityPath);
+#ifndef MTK_HARDWARE
     props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
+#else
+    props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath);
+#endif
 
     props.batteryTemperature = mBatteryFixedTemperature ?
         mBatteryFixedTemperature :
diff --git a/include/netutils/ifc.h b/include/netutils/ifc.h
index 3b27234..b7d681a 100644
--- a/include/netutils/ifc.h
+++ b/include/netutils/ifc.h
@@ -61,6 +61,8 @@ extern int ifc_configure(const char *ifname, in_addr_t address,
 
 extern in_addr_t prefixLengthToIpv4Netmask(int prefix_length);
 
+extern int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps);
+
 __END_DECLS
 
 #endif /* _NETUTILS_IFC_H_ */
diff --git a/init/init.cpp b/init/init.cpp
index 8ea42ca..63cb3d6 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -817,7 +817,7 @@ static void export_kernel_boot_props() {
         { "ro.boot.mode",       "ro.bootmode",   "unknown", },
         { "ro.boot.baseband",   "ro.baseband",   "unknown", },
         { "ro.boot.bootloader", "ro.bootloader", "unknown", },
-        { "ro.boot.hardware",   "ro.hardware",   "unknown", },
+        { "ro.boot.hardware",   "ro.hardware",   "mt6592", },
 #ifndef IGNORE_RO_BOOT_REVISION
         { "ro.boot.revision",   "ro.revision",   "0", },
 #endif
@@ -929,10 +929,11 @@ static bool selinux_is_disabled(void)
 
 static bool selinux_is_enforcing(void)
 {
-    if (ALLOW_DISABLE_SELINUX) {
+    return false;
+    /*if (ALLOW_DISABLE_SELINUX) {
         return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
-    return true;
+    return true;*/
 }
 
 int selinux_reload_policy(void)
@@ -1018,7 +1019,7 @@ static int charging_mode_booting(void) {
     }
 
     close(f);
-    return ('1' == cmb);
+    return ('8' == cmb);
 #endif
 }
 
diff --git a/liblog/logd_write.c b/liblog/logd_write.c
index 9c4e481..723a9d2 100644
--- a/liblog/logd_write.c
+++ b/liblog/logd_write.c
@@ -410,6 +410,26 @@ int __android_log_buf_write(int bufID, int prio, const char *tag, const char *ms
     if (!tag)
         tag = "";
 
+    // MediaTek: Prevent log spamming of audio.
+    if (!strcmp(tag, "AudioMTKFilterManager") ||
+        !strcmp(tag, "AudioMTKFilter") ||
+        !strcmp(tag, "AudioMTKStreamOut") ||
+        !strcmp(tag, "AudioVPWStreamIn") ||
+        !strcmp(tag, "AudioDigitalControl") ||
+        !strcmp(tag, "AudioLoopbackController") ||
+        !strcmp(tag, "AudioMTKVolumeController") ||
+        !strcmp(tag, "AudioDigitalControl") ||
+        !strcmp(tag, "AudioAnalogControl") ||
+        !strcmp(tag, "AudioAfeReg") ||
+        !strcmp(tag, "AudioAnalogReg") ||
+        !strcmp(tag, "AudioPlatformDevice") ||
+        !strcmp(tag, "AudioMachineDevice") ||
+        !strcmp(tag, "MtkAudioLoud") ||
+        !strcmp(tag, "LoopbackManager") ||
+        !strcmp(tag, "AudioInterConnection")) {
+            return 0;
+    }
+
     /* XXX: This needs to go! */
     if ((bufID != LOG_ID_RADIO) &&
          (!strcmp(tag, "HTC_RIL") ||
diff --git a/libnetutils/ifc_utils.c b/libnetutils/ifc_utils.c
index 0bd7628..9587e5b 100644
--- a/libnetutils/ifc_utils.c
+++ b/libnetutils/ifc_utils.c
@@ -36,6 +36,7 @@
 #include <linux/ipv6_route.h>
 #include <linux/rtnetlink.h>
 #include <linux/sockios.h>
+#include <linux/un.h>
 
 #include "netutils/ifc.h"
 
@@ -710,3 +711,77 @@ ifc_configure(const char *ifname,
 
     return 0;
 }
+
+static int ifc_netd_sock_init(void)
+{
+    int ifc_netd_sock;
+    const int one = 1;
+    struct sockaddr_un netd_addr;
+  
+        ifc_netd_sock = socket(AF_UNIX, SOCK_STREAM, 0);
+        if (ifc_netd_sock < 0) {
+            printerr("ifc_netd_sock_init: create socket failed");
+            return -1;
+        }
+  
+        setsockopt(ifc_netd_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
+        memset(&netd_addr, 0, sizeof(netd_addr));
+        netd_addr.sun_family = AF_UNIX;
+        strlcpy(netd_addr.sun_path, "/dev/socket/netd",
+            sizeof(netd_addr.sun_path));
+        if (TEMP_FAILURE_RETRY(connect(ifc_netd_sock,
+                     (const struct sockaddr*) &netd_addr,
+                     sizeof(netd_addr))) != 0) {
+            printerr("ifc_netd_sock_init: connect to netd failed, fd=%d, err: %d(%s)", 
+                ifc_netd_sock, errno, strerror(errno));
+            close(ifc_netd_sock);
+            return -1;
+        }
+  
+    if (DBG) printerr("ifc_netd_sock_init fd=%d", ifc_netd_sock);
+    return ifc_netd_sock;
+}
+
+/*do not call this function in netd*/
+int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps)
+{
+    FILE* fnetd = NULL;
+    int ret = -1;
+    int seq = 1;
+    char rcv_buf[24];
+	int nread = 0;
+	int netd_sock = 0;
+	
+    ALOGD("enter ifc_set_throttle: ifname = %s, rx = %d kbs, tx = %d kbs", ifname, rxKbps, txKbps);
+
+    netd_sock = ifc_netd_sock_init();
+    if(netd_sock <= 0)
+        goto exit;
+    
+    // Send the request.
+    fnetd = fdopen(netd_sock, "r+");
+	if(fnetd == NULL){
+		ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
+		goto exit;
+	}
+    if (fprintf(fnetd, "%d interface setthrottle %s %d %d", seq, ifname, rxKbps, txKbps) < 0) {
+        goto exit;
+    }
+    // literal NULL byte at end, required by FrameworkListener
+    if (fputc(0, fnetd) == EOF ||
+        fflush(fnetd) != 0) {
+        goto exit;
+    }
+    ret = 0;
+
+	//Todo: read the whole response from netd
+	nread = fread(rcv_buf, 1, 20, fnetd);
+	rcv_buf[23] = 0;
+	ALOGD("response: %s", rcv_buf);
+exit:
+    if (fnetd != NULL) {
+        fclose(fnetd);
+    }
+  
+    return ret;
+}
diff --git a/libutils/Android.mk b/libutils/Android.mk
index 23a5c59..c2b1df5 100644
--- a/libutils/Android.mk
+++ b/libutils/Android.mk
@@ -83,6 +83,8 @@ LOCAL_CFLAGS += -DALIGN_DOUBLE
 endif
 LOCAL_CFLAGS += -Werror
 
+LOCAL_SRC_FILES += MediatekHacks.cpp
+
 LOCAL_STATIC_LIBRARIES := \
 	libcutils \
 	libc
diff --git a/libutils/MediatekHacks.cpp b/libutils/MediatekHacks.cpp
new file mode 100644
index 0000000..0404a32
--- /dev/null
+++ b/libutils/MediatekHacks.cpp
@@ -0,0 +1,18 @@
+extern "C" {
+ void _ZN7android11IDumpTunnel11asInterfaceERKNS_2spINS_7IBinderEEE(){}
+ void _ZN7android9CallStackC1EPKci(char const*, int);
+ void _ZN7android9CallStack6updateEii(int, int);
+
+ void _ZN7android9CallStackC1EPKcii(char const* logtag, int ignoreDepth, int maxDepth){
+  maxDepth = maxDepth-1;
+  maxDepth = maxDepth+1;
+  _ZN7android9CallStackC1EPKci(logtag, ignoreDepth);
+  
+ }
+
+ void _ZN7android9CallStack6updateEiii(int ignoreDepth, int maxDepth, int tid){
+  maxDepth = maxDepth-1;
+  maxDepth = maxDepth+1; 
+  _ZN7android9CallStack6updateEii(ignoreDepth, tid);
+ }
+}
diff --git a/mkbootimg/bootimg.h b/mkbootimg/bootimg.h
index e66e269..b348bf7 100644
--- a/mkbootimg/bootimg.h
+++ b/mkbootimg/bootimg.h
@@ -28,6 +28,8 @@ typedef struct boot_img_hdr boot_img_hdr;
 #define BOOT_ARGS_SIZE 512
 #define BOOT_EXTRA_ARGS_SIZE 1024
 
+#define MTK_HEADER_SIZE 512
+
 struct boot_img_hdr
 {
     uint8_t magic[BOOT_MAGIC_SIZE];
diff --git a/mkbootimg/mkbootimg.c b/mkbootimg/mkbootimg.c
index ec7c61f..97ff3d7 100644
--- a/mkbootimg/mkbootimg.c
+++ b/mkbootimg/mkbootimg.c
@@ -26,10 +26,12 @@
 #include "mincrypt/sha.h"
 #include "bootimg.h"
 
-static void *load_file(const char *fn, unsigned *_sz)
+static void *load_file(const char *fn, unsigned *_sz, int is_mtk, const char *mtk_fn)
 {
     char *data;
+    char *buf_start;
     int sz;
+    int buf_sz;
     int fd;
 
     data = 0;
@@ -41,13 +43,36 @@ static void *load_file(const char *fn, unsigned *_sz)
 
     if(lseek(fd, 0, SEEK_SET) != 0) goto oops;
 
-    data = (char*) malloc(sz);
+    buf_sz = sz + (is_mtk ? MTK_HEADER_SIZE : 0);
+    data = buf_start = (char*) malloc(buf_sz);
     if(data == 0) goto oops;
 
-    if(read(fd, data, sz) != sz) goto oops;
+    if (is_mtk) {
+        /* MTK magic */
+        data[0] = 0x88;
+        data[1] = 0x16;
+        data[2] = 0x88;
+        data[3] = 0x58;
+
+        /* file length in little endian */
+        data[4] = sz & 0xFF;
+        data[5] = (sz >> 8) & 0xFF;
+        data[6] = (sz >> 16) & 0xFF;
+        data[7] = (sz >> 24) & 0xFF;
+
+        /* MTK "file name" */
+        strncpy(data + 8, mtk_fn, 32);
+
+        /* MTK header padding */
+        memset(data + 40, 0xff, MTK_HEADER_SIZE - 40);
+
+        buf_start += MTK_HEADER_SIZE;
+    }
+
+    if(read(fd, buf_start, sz) != sz) goto oops;
     close(fd);
 
-    if(_sz) *_sz = sz;
+    if(_sz) *_sz = buf_sz;
     return data;
 
 oops:
@@ -71,6 +96,7 @@ int usage(void)
             "       [ --second_offset <address> ]\n"
             "       [ --tags_offset <address> ]\n"
             "       [ --id ]\n"
+            "       [ --mtk <boot|recovery> ]\n"
             "       -o|--output <filename>\n"
             );
     return 1;
@@ -111,6 +137,8 @@ int main(int argc, char **argv)
 {
     boot_img_hdr hdr;
 
+    int is_mtk = 0;
+    int is_mtk_boot = 0;
     char *kernel_fn = NULL;
     void *kernel_data = NULL;
     char *ramdisk_fn = NULL;
@@ -182,6 +210,16 @@ int main(int argc, char **argv)
                 }
             } else if(!strcmp(arg, "--dt")) {
                 dt_fn = val;
+            } else if (!strcmp(arg, "--mtk")) {
+                if (!strcmp(val, "boot")) {
+                    is_mtk = 1;
+                    is_mtk_boot = 1;
+                } else if (!strcmp(val, "recovery")) {
+                    is_mtk = 1;
+                    is_mtk_boot = 0;
+                } else {
+                    return usage();
+                }
             } else {
                 return usage();
             }
@@ -229,7 +267,7 @@ int main(int argc, char **argv)
         strncpy((char *)hdr.extra_cmdline, cmdline, BOOT_EXTRA_ARGS_SIZE);
     }
 
-    kernel_data = load_file(kernel_fn, &hdr.kernel_size);
+    kernel_data = load_file(kernel_fn, &hdr.kernel_size, is_mtk, "KERNEL");
     if(kernel_data == 0) {
         fprintf(stderr,"error: could not load kernel '%s'\n", kernel_fn);
         return 1;
@@ -239,7 +277,7 @@ int main(int argc, char **argv)
         ramdisk_data = 0;
         hdr.ramdisk_size = 0;
     } else {
-        ramdisk_data = load_file(ramdisk_fn, &hdr.ramdisk_size);
+        ramdisk_data = load_file(ramdisk_fn, &hdr.ramdisk_size, is_mtk, is_mtk_boot ? "ROOTFS" : "RECOVERY");
         if(ramdisk_data == 0) {
             fprintf(stderr,"error: could not load ramdisk '%s'\n", ramdisk_fn);
             return 1;
@@ -247,7 +285,7 @@ int main(int argc, char **argv)
     }
 
     if(second_fn) {
-        second_data = load_file(second_fn, &hdr.second_size);
+        second_data = load_file(second_fn, &hdr.second_size, is_mtk, "");
         if(second_data == 0) {
             fprintf(stderr,"error: could not load secondstage '%s'\n", second_fn);
             return 1;
@@ -255,7 +293,7 @@ int main(int argc, char **argv)
     }
 
     if(dt_fn) {
-        dt_data = load_file(dt_fn, &hdr.dt_size);
+        dt_data = load_file(dt_fn, &hdr.dt_size, is_mtk, "");
         if (dt_data == 0) {
             fprintf(stderr,"error: could not load device tree image '%s'\n", dt_fn);
             return 1;
diff --git a/mkbootimg/unpackbootimg.c b/mkbootimg/unpackbootimg.c
index 3d2fda7..d844cfd 100644
--- a/mkbootimg/unpackbootimg.c
+++ b/mkbootimg/unpackbootimg.c
@@ -38,11 +38,21 @@ void write_string_to_file(char* file, char* string)
     fclose(f);
 }
 
+void maybe_skip_mtk_header(FILE* f, int is_mtk)
+{
+    if (!is_mtk) {
+        return;
+    }
+
+    fseek(f, MTK_HEADER_SIZE, SEEK_CUR);
+}
+
 int usage() {
     printf("usage: unpackbootimg\n");
     printf("\t-i|--input boot.img\n");
     printf("\t[ -o|--output output_directory]\n");
     printf("\t[ -p|--pagesize <size-in-hexadecimal> ]\n");
+    printf("\t[ --mtk 1 ]\n");
     return 0;
 }
 
@@ -52,6 +62,7 @@ int main(int argc, char** argv)
     char* directory = "./";
     char* filename = NULL;
     int pagesize = 0;
+    int is_mtk = 0;
 
     argc--;
     argv++;
@@ -66,6 +77,12 @@ int main(int argc, char** argv)
             directory = val;
         } else if(!strcmp(arg, "--pagesize") || !strcmp(arg, "-p")) {
             pagesize = strtoul(val, 0, 16);
+        } else if (!strcmp(arg, "--mtk")) {
+            if (!strcmp(val, "1")) {
+                is_mtk = 1;
+            }
+
+            return usage();
         } else {
             return usage();
         }
@@ -153,23 +170,27 @@ int main(int argc, char** argv)
     //printf("total read: %d\n", total_read);
     total_read += read_padding(f, sizeof(header), pagesize);
 
+    int mtk_size_adjust = is_mtk ? -MTK_HEADER_SIZE : 0;
+
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-zImage");
     FILE *k = fopen(tmp, "wb");
-    byte* kernel = (byte*)malloc(header.kernel_size);
+    byte* kernel = (byte*)malloc(header.kernel_size + mtk_size_adjust);
     //printf("Reading kernel...\n");
-    fread(kernel, header.kernel_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(kernel, header.kernel_size + mtk_size_adjust, 1, f);
     total_read += header.kernel_size;
-    fwrite(kernel, header.kernel_size, 1, k);
+    fwrite(kernel, header.kernel_size + mtk_size_adjust, 1, k);
     fclose(k);
 
     //printf("total read: %d\n", header.kernel_size);
     total_read += read_padding(f, header.kernel_size, pagesize);
 
 
-    byte* ramdisk = (byte*)malloc(header.ramdisk_size);
+    byte* ramdisk = (byte*)malloc(header.ramdisk_size + mtk_size_adjust);
     //printf("Reading ramdisk...\n");
-    fread(ramdisk, header.ramdisk_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(ramdisk, header.ramdisk_size + mtk_size_adjust, 1, f);
     total_read += header.ramdisk_size;
     sprintf(tmp, "%s/%s", directory, basename(filename));
     if(ramdisk[0] == 0x02 && ramdisk[1]== 0x21)
@@ -177,7 +198,7 @@ int main(int argc, char** argv)
     else
         strcat(tmp, "-ramdisk.gz");
     FILE *r = fopen(tmp, "wb");
-    fwrite(ramdisk, header.ramdisk_size, 1, r);
+    fwrite(ramdisk, header.ramdisk_size + mtk_size_adjust, 1, r);
     fclose(r);
 
     total_read += read_padding(f, header.ramdisk_size, pagesize);
@@ -185,11 +206,12 @@ int main(int argc, char** argv)
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-second");
     FILE *s = fopen(tmp, "wb");
-    byte* second = (byte*)malloc(header.second_size);
+    byte* second = (byte*)malloc(header.second_size + mtk_size_adjust);
     //printf("Reading second...\n");
-    fread(second, header.second_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(second, header.second_size + mtk_size_adjust, 1, f);
     total_read += header.second_size;
-    fwrite(second, header.second_size, 1, r);
+    fwrite(second, header.second_size + mtk_size_adjust, 1, r);
     fclose(s);
 
     total_read += read_padding(f, header.second_size, pagesize);
@@ -197,11 +219,12 @@ int main(int argc, char** argv)
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-dt");
     FILE *d = fopen(tmp, "wb");
-    byte* dt = (byte*)malloc(header.dt_size);
+    byte* dt = (byte*)malloc(header.dt_size + mtk_size_adjust);
     //printf("Reading dt...\n");
-    fread(dt, header.dt_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(dt, header.dt_size + mtk_size_adjust, 1, f);
     total_read += header.dt_size;
-    fwrite(dt, header.dt_size, 1, r);
+    fwrite(dt, header.dt_size + mtk_size_adjust, 1, r);
     fclose(d);
     
     fclose(f);
diff --git a/rootdir/init.rc b/rootdir/init.rc
index 1c6fca6..63e371f 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -492,6 +492,9 @@ on boot
     chown system system /sys/class/leds/red/device/grpfreq
     chown system system /sys/class/leds/red/device/grppwm
     chown system system /sys/class/leds/red/device/blink
+    chown system system /sys/class/leds/red/trigger
+    chown system system /sys/class/leds/green/trigger
+    chown system system /sys/class/leds/blue/trigger
     chown system system /sys/class/timed_output/vibrator/enable
     chown system system /sys/module/sco/parameters/disable_esco
     chown system system /sys/kernel/ipv4/tcp_wmem_min
@@ -653,17 +656,9 @@ service debuggerd64 /system/bin/debuggerd64
     class main
     writepid /dev/cpuset/system-background/tasks
 
-service ril-daemon /system/bin/rild
-    class main
-    socket rild stream 660 root radio
-    socket sap_uim_socket1 stream 660 bluetooth bluetooth
-    socket rild-debug stream 660 radio system
-    user root
-    group radio cache inet misc audio log qcom_diag
-
 service surfaceflinger /system/bin/surfaceflinger
     class core
-    user system
+    user root
     group graphics drmrpc
     onrestart restart zygote
 
@@ -674,7 +669,7 @@ service drm /system/bin/drmserver
 
 service media /system/bin/mediaserver
     class main
-    user media
+    user root
     group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm qcom_diag
     ioprio rt 4
 
